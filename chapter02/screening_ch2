public class Screening{
    private Movie movie;
    private int sequence;
    private LocalDateTime whenScreened;

    public Screening(Movie movie, int sequence, LocalDateTime whenScreened){
        this.movie=movie;
        this.sequence=sequence;
        this.whenScreened=whenScreened;
    }

    public LocalDateTime getStartTime(){
        return whenScreened;
    }
    public boolean isSequence(int sequence){
        return this.sequence==sequence;
    }
    public Money getMovieFee(){
        return movie.getFee();
    }
    public Reservation reservation(Customer customer, int audienceCount){
        return new Reservation(customer, this, calculateFee(audienceCount), audienceCount);
    }
    private Money calculateFee(int audienceCount){
        return movie.calculateMovieFee(this).times(audienceCount);
    }
}

public class Money{
    public static final Money ZERO=Money.wons(0);

    private final BigDecimal amount;

    public static Money wons(long amount){
        return new Money(BigDecimal.valueOf(amount));
    }
    public static Money wons(double amount){
        return new Money(BigDecimal.valueOf(amount));
    }
    Money(BigDecimal amount){
        this.amount=amount;
    }
    public Money plus(Money amount){
        return new Money(this.amount.add(amount.amount));
    }
    public Money minus(Money amount){
        return new Money(this.amount.subtract(amount.amount));
    }
    public Money times(double percent){
        return new Money(this.amount.multiply(BigDecimal.valueOf(percent)));
    }
    public boolean isLessThan(Money other){
        return amount.compareTo(other.amount)<0;
    }
    public boolean isGreaterThanOrEqual(Money other){
        return amount.compareTo(other.amount)>=0;
    }
}

public class Reservation{
    private Customer customer;
    private Screening screening;
    private Money fee;
    private int audienceCount;

    public Reservation(Customer customer, Screening screening, Money fee, int audienceCount){
        this.customer=customer;
        this.screening=screening;
        this.fee=fee;
        this.audienceCount=audienceCount;
    }
}

public class Movie{
    private String title;
    private Duration runningTime;
    private Money fee;
    private DiscountPolicy discountPolicy;

    public Movie(String title, Duration runningTime, Money fee, DiscountPolicy discountPolicy){
        this.title=title;
        this.runningTime=runningTime;
        this.fee=fee;
        this.discountPolicy=discountPolicy;
    }
    public Money getFee(){
        return fee;
    }
    public Money calculateMovieFee(Screening screening){
        return fee.minus(discountPolicy.calculateDiscountAmount(screening));
    }
}

public abstract class DiscountPolicy{
    private List<DiscountCondition> conditions=new ArrayList<>();

    public DiscountPolicy(DiscountCondition ... conditions){  //DiscountCondition의 리스트: conditions
        this.conditions=Arrays.asList(conditions);
    }
    public Money calculateDiscountAmount(Screening screening){
        for(DiscountCondition each:conditions){ // 할인 조건을 하나라도 만족하면
            if(each.isSatisfiedBy(screening)){
                return getDiscountAmount(screening);
            }
        }
        return Money.ZERO; // 할인되지 않는 경우
    }
    abstract protected Money getDiscountAmount(Screening screening); // 실제 할인 요금 계산하는 부분
}

public interface DiscountCondition{
    boolean isSatisfiedBy(Screening screening);
}

public class SequenceCondition implements DiscountCondition{
    private int sequence;

    public SequenceCondition(int sequence){
        this.sequence=sequence;
    }
    public boolean isSatisfiedBy(Screening screening){
        return screening.isSequence(sequence);
    }
}

public class PeriodCondition implements DiscountCondition{
    private DayOfWeek dayOfWeek;
    private LocalTime startTime;
    private LocalTime endTime;

    public PeriodCondition(DayOfWeek dayOfWeek, LocalTime startTime, LocalTime endTime){
        this.dayOfWeek=dayOfWeek;
        this.startTime=startTime;
        this.endTime=endTime;
    }
    public boolean isSatisfiedBy(Screening screening){
        return screening.getStartTime().getDayOfWeek().equals(dayOfWeek) &&
            startTime.compareTo(screening.getStartTime().toLocalTime())<=0 &&
            endTime.compareTo(screening.getStartTime().toLocalTime())>=0; 
    }
}

public class AmountDiscountPolicy extends DiscountPolicy{
    private Money discountAmount;

    public AmountDiscountPolicy(Money discountAmount, DiscountCondition ... conditions){
        super(conditions);
        this.discountAmount=discountAmount;
    }
    @Override
    protected Money getDiscountAmount(Screening screening){
        return discountAmount;
    }
}

public class PercentDiscountPolicy extends DiscountPolicy{
    private double percent;

    public PercentDiscountPolicy(double percent, DiscountCondition ... conditions){
        super(conditions);
        this.percent=percent;
    }
    @Override
    protected Money getDiscountAmount(Screening screening){
        return screening.getMovieFee().times(percent);
    }
}

Movie avater=new Movie(
    "아바타", Duration.ofMinutes(120), Money.wons(10000),
    new AmountDiscountPolicy(Money.wons(800),
        new SequenceCondition(1),
        new SequenceCondition(10),
        new PeriodCondition(DayOfWeek.MONDAY, LocalTime.of(10,0), LocalTime.of(11,59)),
        new PeriodCondition(DayOfWeek.THURSDAY, LocalTime.of(10,0), LocalTime.of(20,59))
        )
);

Movie titanic=new Movie(
    "타이타닉", Duration.ofMinutes(180), Money.wons(11000),
    new PercentDiscountPolicy(0.1,
        new PeriodCondition(DayOfWeek.TUESDAY, LocalTime.of(14,0), LocalTime.of(16,59)),
        new SequenceCondition(2),
        new PeriodCondition(DayOfWeek.THURSDAY, LocalTime.of(10,0), LocalTime.of(13,59))
    )
);
